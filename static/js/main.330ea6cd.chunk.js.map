{"version":3,"sources":["Action.js","App.js","ACTWebsocket.js","serviceWorker.js","index.js"],"names":["gcdExceptions","ogcdExceptions","Action","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","xivapi_data","actionUrl","action_id","fetch","mode","then","response","json","data","setState","indexOf","ActionCategory","ID","Icon","classes","isGCD","img","react_default","a","createElement","className","src","alt","React","Component","App","me","actionlist","actionindex","lastAddedTimestamp","listenActWebSocket","callback","url","URLSearchParams","window","location","search","wsUri","concat","get","undefined","ws","WebSocket","onerror","onmessage","e","m","send","obj","JSON","parse","msgtype","msg","code","substring","handleLogEvent","bind","assertThisInitialized","charID","log","split","parseInt","action","index","setTimeout","purgeAction","slice","actions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","push","src_Action","key","err","return","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.330ea6cd.chunk.js","sourcesContent":["import React from 'react'\r\nimport './css/Action.css'\r\n\r\nconst gcdExceptions = [\r\n\t15997, //standard step\r\n\t15998, //technical step\r\n\t15999, \r\n\t16000,\r\n\t16001,\r\n\t16002, //step actions\r\n\t16003, //standard finish\r\n\t16004, //technical finish\r\n\t16191, //single standard finish\r\n\t16192, //double standard finish (WHY IS IT LIKE THIS)\r\n\t16193, //single technical finish\r\n\t16194, //double technical finish\r\n\t16195, //triple technical finish\r\n\t16196, //quadruple technical finish\r\n\t7418, //flamethrower\r\n\t16483 //tsubame-gaeshi\r\n]\r\n\r\nconst ogcdExceptions = [\r\n\t3559, //bard WM\r\n\t116, //bard AP\r\n\t114 //bard MB\r\n]\r\n\r\nclass Action extends React.Component {\r\n\tstate = {\r\n\t\txivapi_data: []\r\n\t}\r\n\t\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\t\r\n\t\tconst actionUrl = \"https://xivapi.com/Action/\"+props.action_id;\r\n\t\t\r\n\t\tfetch(actionUrl, { mode: 'cors' })\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(data => {this.setState({xivapi_data: data})})\r\n\t}\r\n\t\r\n\tisGCD() {\r\n\t\tif(gcdExceptions.indexOf(this.props.action_id) !== -1) return true\r\n\t\tif(ogcdExceptions.indexOf(this.props.action_id) !== -1) return false\r\n\t\t\r\n\t\treturn (this.state.xivapi_data.ActionCategory.ID !== 4)\r\n\t}\r\n\t\r\n\trender() {\r\n\t\tif(this.state.xivapi_data.Icon) {\r\n\t\t\tconst classes = this.isGCD()?'action-icon gcd':'action-icon ogcd'\r\n\t\t\tconst img = \"https://xivapi.com\"+this.state.xivapi_data.Icon\r\n\t\t\treturn <img className={classes} src={img} alt='' />\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\treturn null\r\n\t\t}\r\n    }\r\n}\r\n\r\nexport default Action","import React from 'react'\nimport listenActWebSocket from './ACTWebsocket'\nimport './css/App.css'\nimport Action from './Action'\n\nclass App extends React.Component {\n\tstate = {\n\t\tme: 0,\n\t\tactionlist: [],\n\t\tactionindex: 1,\n\t\tlastAddedTimestamp: ''\n\t}\n\t\n\tconstructor(props) {\n\t\tsuper(props)\n\t\t\n\t\tlistenActWebSocket(this.handleLogEvent.bind(this))\n\t}\n\t\n\thandleLogEvent(data) {\n\t\tif(data.charID) {\n\t\t\tthis.setState({me: data.charID})\n\t\t\treturn\n\t\t} //the ME data we need\n\t\t\n\t\tconst me = this.state.me\n\t\t\n\t\tif(me === 0) return //we need data on the character first\n\t\t\n\t\tlet log = data.split('|')\n\t\t\n\t\tif(parseInt(log[2],16) !== me) return //we only care about our actions\n\t\t\n\t\tconst action = parseInt(log[4],16)\n\t\t\n\t\tif(action <= 8) return //things we don't care about i.e. sprint auto-attacks\n\t\t\n\t\tif(this.state.lastAddedTimestamp === log[1]) return //no double aoe stuff\n\t\t\n\t\tconst index = this.state.actionindex\n\t\t\n\t\tthis.setState((state) => {\n\t\t\tconst actionindex = (state.actionindex >= 32)?1:state.actionindex+1\n\t\t\tconst lastAddedTimestamp = log[1]\n\t\t\tconst actionlist = state.actionlist.concat({index,action})\n\t\t\t\n\t\t\treturn {actionindex,lastAddedTimestamp,actionlist}\n\t\t})\n\t\t\n\t\tsetTimeout(this.purgeAction.bind(this), 10000)\n\t}\n\t\n\tpurgeAction() {\n\t\tthis.setState((state) => {\n\t\t\tconst actionlist = state.actionlist.slice(1)\n\t\t\t\n\t\t\treturn {actionlist}\n\t\t})\n\t}\n\t\n\trender() {\n\t\tlet actions = []\n\t\t\n\t\tfor (const action of this.state.actionlist) {\n\t\t\tactions.push(<Action key={action.index} action_id={action.action} />)\n\t\t}\n\t\t\n\t\treturn <div className=\"actions\">{actions}</div>\n\t}\n}\n\nexport default App;\n","export default function listenActWebSocket(callback) {\r\n\tconst url = new URLSearchParams(window.location.search)\r\n\tconst wsUri = `${url.get('HOST_PORT')}BeforeLogLineRead` || undefined\r\n\tconst ws = new WebSocket(wsUri)\r\n\tws.onerror = () => listenActWebSocket()\r\n\tws.onmessage = function (e, m) { //PING\r\n\t\tif (e.data === '.') return ws.send('.') //PONG\r\n\t\t\r\n\t\tconst obj = JSON.parse(e.data)\r\n\t\tif(obj.msgtype === 'SendCharName')\r\n\t\t{\r\n\t\t\treturn callback(obj.msg)\r\n\t\t}\r\n\t\telse if(obj.msgtype === 'Chat')\r\n\t\t{\r\n\t\t\tconst code = obj.msg.substring(0, 2) //first 2 numbers POG\r\n\r\n\t\t\tif(code === '21' || code === '22') return callback(obj.msg) //NetworkAbility or NetworkAoeAbility\r\n\t\t}\r\n\t}\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}